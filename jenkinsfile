pipeline {
    agent any

    environment {
        QEMU_IMAGE = '/romulus/obmc-phosphor-image-romulus-20250418213140.static.mtd'
        QEMU_LOG = 'qemu.log'
        VENV = 'venv'
    }

    stages {
        stage('Prepare Environment') {
            steps {
                sh '''
                    apt-get update
                    apt-get install -y wget python3-venv python3-pip qemu-system-arm curl xvfb chromium-driver chromium

                    # Создание и активация виртуального окружения
                    python3 -m venv ${VENV}
                    . ${VENV}/bin/activate
                    pip install --upgrade pip
                    pip install -r requirements.txt pytest selenium locust
                '''
            }
        }

        stage('Start QEMU with OpenBMC') {
            steps {
                sh '''
                    nohup qemu-system-arm -m 256 -M romulus-bmc -nographic \
                        -drive file=${QEMU_IMAGE},format=raw,if=mtd \
                        -net nic -net user,hostfwd=:0.0.0.0:2222-:22,hostfwd=:0.0.0.0:2443-:443,hostfwd=udp:0.0.0.0:2623-:623 \
                        > ${QEMU_LOG} 2>&1 &

                    sleep 60
                '''
            }
        }

        stage('Run Redfish API Tests') {
            steps {
                sh '''
                    . ${VENV}/bin/activate
                    pytest -v test_redfish.py > redfish_report.log || true
                '''
                archiveArtifacts artifacts: 'redfish_report.log', onlyIfSuccessful: false
            }
        }

        stage('Run WebUI Tests') {
            steps {
                sh '''
                    export DISPLAY=:99
                    Xvfb :99 &

                    . ${VENV}/bin/activate
                    sleep 5
                    pytest -v test_webui.py > webui_report.log || true
                '''
                archiveArtifacts artifacts: 'webui_report.log', onlyIfSuccessful: false
            }
        }

        stage('Run Load Tests') {
            steps {
                sh '''
                    . ${VENV}/bin/activate
                    locust -f test_load.py --headless --host https://localhost:2443 \
                        --users 5 --spawn-rate 1 -t1m > load_report.log 2>&1 || true
                '''
                archiveArtifacts artifacts: 'load_report.log', onlyIfSuccessful: false
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: "${QEMU_LOG}", onlyIfSuccessful: false
            sh 'pkill -f qemu-system-arm || true'
        }
    }
}